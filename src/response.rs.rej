--- src/response.rs
+++ src/response.rs
@@ -401,15 +408,53 @@ impl Response {
             Body::Reader(mut reader) => {
                 #[cfg(feature = "compression")]
                 {
-                    if _gzip {
-                        let mut vec = vec![];
-                        if reader.read_to_end(&mut vec).is_ok(){
-                            body.write_all(
-                                &Encoder::new(vec).unwrap().finish().into_result().unwrap(),
-                            )?;
+                    match encoding {
+                        Some(encoding) => match encoding {
+                            VialEncoding::Gzip => {
+                                let mut vec = vec![];
+                                if reader.read_to_end(&mut vec).is_ok() {
+                                    body.write_all(
+                                        &libflate::gzip::Encoder::new(vec)
+                                            .unwrap()
+                                            .finish()
+                                            .into_result()
+                                            .unwrap(),
+                                    )?;
+                                }
+                            }
+                            VialEncoding::Deflate => {
+                                let mut vec = vec![];
+                                if reader.read_to_end(&mut vec).is_ok() {
+                                    body.write_all(
+                                        &libflate::deflate::Encoder::new(vec)
+                                            .finish()
+                                            .into_result()
+                                            .unwrap(),
+                                    )?;
+                                }
+                            }
+                            VialEncoding::Brotli => {
+                                io::copy(
+                                    &mut brotli2::read::BrotliEncoder::new(reader, 6),
+                                    &mut body,
+                                )?;
+                            }
+                            VialEncoding::Zstd => {
+                                let mut vec = vec![];
+                                if reader.read_to_end(&mut vec).is_ok() {
+                                    let zstd = zstd::stream::write::Encoder::new(vec, 3)
+                                        .unwrap()
+                                        .finish()
+                                        .unwrap();
+                                    body.write_all(&zstd)?;
+                                    // io::copy(&mut zstd, &mut body)?;
+                                }
+                            }
+                            VialEncoding::Identity => todo!(),
+                        },
+                        None => {
+                            io::copy(&mut reader, &mut body)?;
                         }
-                    } else {
-                        io::copy(&mut reader, &mut body)?;
                     }
                 }
 
